<?php

namespace app\components\zalo;

use app\components\authclient\clients\ZaloService;
use Exception;
use Yii;
use yii\authclient\Collection;
use yii\base\Component;
use yii\base\InvalidConfigException;
use yii\base\InvalidParamException;
use yii\db\Query;
use yii\httpclient\Client;

class ZaloBaseComponent extends Component
{

    protected $services;
    protected $accessToken;
    public $authClientId;
    public $zaloId;
    public $tableAccessToken;
    protected $httpclient;

    public function init()
    {
        $this->initAccessToken();
        $this->setServices($this->configServices());
        $this->httpclient = new Client();
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    protected function initAccessToken()
    {
        $serviceOauth = (new Query())->from($this->getTableAccessTokenDb())->where(["auth_client" => $this->zaloId])->one();
        if (!$serviceOauth) {
            throw new Exception("AccessToken not found");
        }
        if ($serviceOauth["token_expires_in"] >= time()) {
            $this->setAccessToken($serviceOauth["access_token"]);
            return true;
        }
        if ($serviceOauth["refresh_token_expires_in"] >= time()) {
            /* @var $collection Collection */
            /* @var $client ZaloService */
            $collection = Yii::$app->get($this->authClientId);
            if (!$collection->hasClient($this->zaloId)) {
                throw new Exception("Can't load Zalo Auth Component");
            }
            $client = $collection->getClient($this->zaloId);
            $response = $client->refreshAccessToken($client->buildOathToken([
                "refresh_token" => $serviceOauth["refresh_token"]
            ]));
            $client->revokeAccessTokenDb();
            $client->pushAccessTokenDb($response);
            $this->setAccessToken($response->getToken());
            return true;
        }
        throw new Exception("Refresh Token expired");
    }

    public function getTableAccessTokenDb()
    {
        return $this->tableAccessToken ?? "auth";
    }

    public function setAccessToken($accessToken)
    {
        $this->accessToken = $accessToken;
    }

    public function getAccessToken()
    {
        return $this->accessToken;
    }

    public function getConfigBaseObject()
    {
        return [
            "httpclient" => $this->httpclient,
            "accessToken" => $this->accessToken
        ];
    }

    /**
     * @throws InvalidConfigException
     */
    public function getService($service)
    {
        if (!array_key_exists($service, $this->services)) {
            throw new InvalidParamException("Unknown service '$service'.");
        }
        return Yii::$container->get($this->services[$service], [], $this->getConfigBaseObject());
    }

    public function setServices($services)
    {
        $this->services = $services;
    }

    public function configServices()
    {
        return [];
    }
}